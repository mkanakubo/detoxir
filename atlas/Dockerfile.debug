# Debugging Dockerfile to check container state
# syntax=docker/dockerfile:1
# check=error=true

# Make sure RUBY_VERSION matches the Ruby version in .ruby-version
ARG RUBY_VERSION=3.2.2
FROM docker.io/library/ruby:$RUBY_VERSION-slim AS base

# Rails app lives here
WORKDIR /rails

# Install base packages (Cloud SQL Proxy用のcurlも追加)
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y curl default-mysql-client libjemalloc2 libvips wget && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Set production environment (Cloud Run用の環境変数を追加)
ENV RAILS_ENV="production" \
    BUNDLE_PATH="/usr/local/bundle" \
    BUNDLE_WITHOUT="development" \
    PORT="8080" \
    RAILS_SERVE_STATIC_FILES="true" \
    RAILS_LOG_TO_STDOUT="true"

# Throw-away build stage to reduce size of final image
FROM base AS build

# Install packages needed to build gems
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y build-essential default-libmysqlclient-dev git libyaml-dev pkg-config && \
    rm -rf /var/lib/apt/lists /var/cache/apt/archives

# Install application gems
COPY Gemfile Gemfile.lock ./
RUN bundle config set --local path "${BUNDLE_PATH}" && \
    bundle config set --local without 'development test' && \
    bundle install --jobs=4 --retry=3 && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git

# Copy application code
COPY . .

# Skip asset precompilation for API applications
# Create empty manifest.json to prevent asset lookup errors
RUN mkdir -p public/assets && echo '{}' > public/assets/manifest.json

# Final stage for app image
FROM base

# Copy built artifacts: gems, application
COPY --from=build "${BUNDLE_PATH}" "${BUNDLE_PATH}"
COPY --from=build /rails /rails

# Run and own only the runtime files as a non-root user for security
RUN groupadd --system --gid 1000 rails && \
    useradd rails --uid 1000 --gid 1000 --create-home --shell /bin/bash && \
    chown -R rails:rails db log storage tmp && \
    chmod +x /rails/bin/docker-entrypoint
USER 1000:1000

# Set production runtime environment
ENV RAILS_ENV=production
ENV RAILS_SERVE_STATIC_FILES=true
ENV RAILS_LOG_TO_STDOUT=true

# Entrypoint prepares the database.
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# Start server via Thruster by default, this can be overwritten at runtime
EXPOSE 8080
# Debug command to check bundle and gem availability
CMD ["bundle", "exec", "ruby", "-e", "puts 'Ruby version: ' + RUBY_VERSION; puts 'Bundle path: ' + ENV['BUNDLE_PATH']; puts 'RAILS_ENV: ' + ENV['RAILS_ENV'].to_s; puts 'Current dir: ' + Dir.pwd; puts 'Bundle config:'; system('bundle config'); puts 'Checking rails...'; require 'rails'; puts 'Rails loaded successfully'; puts 'Starting simple server test...'; require_relative 'config/environment'; puts 'Rails application initialized successfully'"]
